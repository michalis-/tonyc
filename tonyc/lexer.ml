# 1 "lexer.mll"
 
  type token =
    | T_eof | T_id | T_iconst | T_cconst | T_sconst
    | T_and | T_bool | T_char | T_decl | T_def | T_else | T_elsif
    | T_end | T_exit | T_false | T_for | T_head | T_if | T_int
    | T_list | T_mod | T_new | T_nil | T_nilq | T_not | T_or
    | T_ref | T_return | T_skip | T_tail | T_true
    | T_plus | T_minus | T_times | T_div | T_cons 
    | T_eq | T_neq | T_greater | T_less | T_ge | T_le
    | T_lparen | T_rparen | T_lbracket | T_rbracket 
    | T_comma | T_semic | T_colon | T_assign

let incr_linenum lexbuf =
  let pos = lexbuf.Lexing.lex_curr_p in
  lexbuf.Lexing.lex_curr_p <- { pos with
    Lexing.pos_lnum = pos.Lexing.pos_lnum + 1;
    Lexing.pos_bol = pos.Lexing.pos_cnum;
}

let create_hashtable size init = 
  let tbl = Hashtbl.create size in
  List.iter (fun (key,data) -> Hashtbl.add tbl key data) init;
  (tbl)

let keywords = create_hashtable 26 [
  ("and", T_and);    
  ("bool", T_bool);  
  ("char", T_char);  
  ("decl", T_decl);  
  ("def", T_def);    
  ("else", T_else);  
  ("elsif", T_elsif);
  ("end", T_end);    
  ("exit", T_exit);  
  ("false", T_false);
  ("for", T_for);    
  ("head", T_head);  
  ("if", T_if);	    
  ("int", T_int);    
  ("list", T_list);  
  ("mod", T_mod);    
  ("new", T_new);    
  ("nil", T_nil);    
  ("nilq", T_nilq);  
  ("not", T_not);    
  ("or", T_or);	    
  ("ref", T_ref);    
  ("return", T_return);
  ("skip", T_skip);  
  ("tail", T_tail);  
  ("true", T_true)    				
]


# 57 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\227\255\228\255\001\000\231\255\006\000\002\000\235\255\
    \236\255\237\255\238\255\239\255\240\255\003\000\081\000\246\255\
    \247\255\248\255\249\255\250\255\251\255\252\255\253\255\076\000\
    \096\000\193\000\229\255\242\255\245\255\241\255\233\255\230\255\
    \082\000\062\000\007\000\026\001\024\000\055\000\056\000\057\000\
    \096\000\097\000\098\000\099\000\255\255\254\255\253\255\252\255\
    \251\255\250\255\249\255\029\000\101\000\248\255\247\255\217\000\
    \253\255\254\255\218\000\255\255\177\000\251\255\252\255\253\255\
    \099\000\093\000\255\255\254\255";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\028\000\255\255\023\000\021\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\012\000\011\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\001\000\
    \028\000\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\009\000\009\000\255\255\255\255\008\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \003\000\003\000\255\255\255\255";
  Lexing.lex_default = 
   "\001\000\000\000\000\000\032\000\000\000\255\255\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\255\255\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\
    \255\255\255\255\000\000\000\000\000\000\000\000\000\000\000\000\
    \032\000\034\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\255\255\255\255\000\000\000\000\058\000\
    \000\000\000\000\058\000\000\000\062\000\000\000\000\000\000\000\
    \255\255\255\255\000\000\000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\005\000\004\000\031\000\000\000\005\000\000\000\005\000\
    \000\000\000\000\000\000\005\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \005\000\000\000\021\000\016\000\000\000\003\000\005\000\022\000\
    \012\000\011\000\018\000\020\000\008\000\019\000\054\000\017\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\006\000\007\000\014\000\015\000\013\000\030\000\
    \029\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\010\000\031\000\009\000\050\000\049\000\
    \048\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\026\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\051\000\047\000\
    \046\000\045\000\044\000\052\000\053\000\067\000\027\000\028\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\035\000\066\000\000\000\000\000\000\000\000\000\
    \000\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\063\000\000\000\000\000\000\000\025\000\
    \000\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\065\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\056\000\255\255\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\064\000\000\000\000\000\
    \000\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\059\000\059\000\000\000\000\000\000\000\
    \002\000\255\255\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\000\000\000\000\000\000\000\000\
    \025\000\000\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\037\000\000\000\255\255\000\000\
    \000\000\038\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\040\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\039\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \043\000\000\000\000\000\000\000\041\000\000\000\042\000\000\000\
    \000\000\000\000\036\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\061\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\057\000\255\255\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\003\000\255\255\000\000\255\255\005\000\
    \255\255\255\255\255\255\005\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\000\000\000\000\255\255\000\000\005\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\034\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\000\
    \013\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\032\000\000\000\037\000\038\000\
    \039\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\014\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\036\000\040\000\
    \041\000\042\000\043\000\051\000\052\000\064\000\014\000\014\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\033\000\065\000\255\255\255\255\255\255\255\255\
    \255\255\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\060\000\255\255\255\255\255\255\024\000\
    \255\255\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\060\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\055\000\058\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\060\000\255\255\255\255\
    \255\255\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\055\000\058\000\255\255\255\255\255\255\
    \000\000\003\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\255\255\255\255\255\255\255\255\
    \025\000\255\255\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\035\000\255\255\033\000\255\255\
    \255\255\035\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\035\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\032\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\035\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \035\000\255\255\255\255\255\255\035\000\255\255\035\000\255\255\
    \255\255\255\255\035\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\060\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\055\000\058\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec lexer lexbuf =
    __ocaml_lex_lexer_rec lexbuf 0
and __ocaml_lex_lexer_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 61 "lexer.mll"
          id
# 249 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 61 "lexer.mll"
             ( try Hashtbl.find keywords id
               with Not_found -> T_id )
# 254 "lexer.ml"

  | 1 ->
# 64 "lexer.mll"
             ( T_iconst )
# 259 "lexer.ml"

  | 2 ->
# 65 "lexer.mll"
             ( parse_char lexbuf )
# 264 "lexer.ml"

  | 3 ->
# 66 "lexer.mll"
             ( parse_string lexbuf )
# 269 "lexer.ml"

  | 4 ->
# 68 "lexer.mll"
             ( T_plus )
# 274 "lexer.ml"

  | 5 ->
# 69 "lexer.mll"
             ( T_minus )
# 279 "lexer.ml"

  | 6 ->
# 70 "lexer.mll"
             ( T_times )
# 284 "lexer.ml"

  | 7 ->
# 71 "lexer.mll"
             ( T_div )
# 289 "lexer.ml"

  | 8 ->
# 72 "lexer.mll"
             ( T_cons )
# 294 "lexer.ml"

  | 9 ->
# 73 "lexer.mll"
             ( T_eq )
# 299 "lexer.ml"

  | 10 ->
# 74 "lexer.mll"
             ( T_neq )
# 304 "lexer.ml"

  | 11 ->
# 75 "lexer.mll"
             ( T_less )
# 309 "lexer.ml"

  | 12 ->
# 76 "lexer.mll"
             ( T_greater )
# 314 "lexer.ml"

  | 13 ->
# 77 "lexer.mll"
             ( T_le )
# 319 "lexer.ml"

  | 14 ->
# 78 "lexer.mll"
             ( T_ge )
# 324 "lexer.ml"

  | 15 ->
# 80 "lexer.mll"
             ( T_lparen )
# 329 "lexer.ml"

  | 16 ->
# 81 "lexer.mll"
             ( T_rparen )
# 334 "lexer.ml"

  | 17 ->
# 82 "lexer.mll"
             ( T_lbracket )
# 339 "lexer.ml"

  | 18 ->
# 83 "lexer.mll"
             ( T_rbracket )
# 344 "lexer.ml"

  | 19 ->
# 84 "lexer.mll"
             ( T_comma )
# 349 "lexer.ml"

  | 20 ->
# 85 "lexer.mll"
             ( T_semic )
# 354 "lexer.ml"

  | 21 ->
# 86 "lexer.mll"
             ( T_colon )
# 359 "lexer.ml"

  | 22 ->
# 87 "lexer.mll"
             ( T_assign )
# 364 "lexer.ml"

  | 23 ->
# 89 "lexer.mll"
                       ( lexer lexbuf )
# 369 "lexer.ml"

  | 24 ->
# 90 "lexer.mll"
                       ( incr_linenum lexbuf; lexer lexbuf )
# 374 "lexer.ml"

  | 25 ->
# 91 "lexer.mll"
                       ( incr_linenum lexbuf; lexer lexbuf )
# 379 "lexer.ml"

  | 26 ->
# 92 "lexer.mll"
                       ( comments 0 lexbuf )
# 384 "lexer.ml"

  | 27 ->
# 94 "lexer.mll"
                       ( T_eof )
# 389 "lexer.ml"

  | 28 ->
let
# 95 "lexer.mll"
         chr
# 395 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 95 "lexer.mll"
                       ( Printf.eprintf "Invalid character: '%c' (ascii: %d)"
					chr (Char.code chr);
	                 T_eof )
# 401 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_lexer_rec lexbuf __ocaml_lex_state

and parse_char lexbuf =
    __ocaml_lex_parse_char_rec lexbuf 33
and __ocaml_lex_parse_char_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 100 "lexer.mll"
                       ( T_cconst )
# 412 "lexer.ml"

  | 1 ->
# 101 "lexer.mll"
                       ( T_cconst )
# 417 "lexer.ml"

  | 2 ->
# 102 "lexer.mll"
                       ( T_cconst )
# 422 "lexer.ml"

  | 3 ->
# 103 "lexer.mll"
                       ( T_cconst )
# 427 "lexer.ml"

  | 4 ->
# 104 "lexer.mll"
                       ( T_cconst )
# 432 "lexer.ml"

  | 5 ->
# 105 "lexer.mll"
                       ( T_cconst )
# 437 "lexer.ml"

  | 6 ->
# 106 "lexer.mll"
                       ( T_cconst )
# 442 "lexer.ml"

  | 7 ->
# 107 "lexer.mll"
                       ( T_cconst )
# 447 "lexer.ml"

  | 8 ->
# 108 "lexer.mll"
                       ( T_cconst )
# 452 "lexer.ml"

  | 9 ->
let
# 109 "lexer.mll"
         chr
# 458 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 109 "lexer.mll"
                       ( Printf.eprintf "Invalid character constant: '%c' (ascii: %d)"
					chr (Char.code chr);
			 T_eof )
# 464 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_parse_char_rec lexbuf __ocaml_lex_state

and parse_string lexbuf =
    __ocaml_lex_parse_string_rec lexbuf 55
and __ocaml_lex_parse_string_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 114 "lexer.mll"
                       ( T_sconst )
# 475 "lexer.ml"

  | 1 ->
# 115 "lexer.mll"
                       ( let pos = lexbuf.Lexing.lex_curr_p in
			 Printf.eprintf "String terminated with EOF at line %d"
					 pos.pos_lnum;
			 T_eof )
# 483 "lexer.ml"

  | 2 ->
# 119 "lexer.mll"
                       ( let pos = lexbuf.Lexing.lex_curr_p in
			 Printf.eprintf "Multiline string at line %d"
					 pos.pos_lnum;
			 T_eof )
# 491 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_parse_string_rec lexbuf __ocaml_lex_state

and comments level lexbuf =
    __ocaml_lex_comments_rec level lexbuf 60
and __ocaml_lex_comments_rec level lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 125 "lexer.mll"
                       ( if level = 0 then lexer lexbuf 
			 else comments (level-1) lexbuf )
# 503 "lexer.ml"

  | 1 ->
# 127 "lexer.mll"
                       ( comments (level+1) lexbuf )
# 508 "lexer.ml"

  | 2 ->
# 128 "lexer.mll"
                       ( incr_linenum lexbuf; comments level lexbuf )
# 513 "lexer.ml"

  | 3 ->
# 129 "lexer.mll"
                       ( comments level lexbuf )
# 518 "lexer.ml"

  | 4 ->
# 130 "lexer.mll"
                       ( Printf.eprintf "Comments are not closed";
			 T_eof )
# 524 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_comments_rec level lexbuf __ocaml_lex_state

;;

# 133 "lexer.mll"
 
  let string_of_token token = 
    match token with
      | T_eof      ->  "T_eof"
      | T_id       ->  "T_id"
      | T_and      ->  "T_and"     
      | T_bool     ->  "T_bool"    
      | T_char     ->  "T_char"    
      | T_decl     ->  "T_decl"   
      | T_def      ->  "T_def"     
      | T_else     ->  "T_else"    
      | T_elsif	   ->  "T_elsif"	  
      | T_end      ->  "T_end"     
      | T_exit     ->  "T_exit"    
      | T_false	   ->  "T_false"	  
      | T_for      ->  "T_for"     
      | T_head     ->  "T_head"    
      | T_if	   ->  "T_if"	   
      | T_int      ->  "T_int"     
      | T_list     ->  "T_list"    
      | T_mod      ->  "T_mod"     
      | T_new      ->  "T_new"     
      | T_nil      ->  "T_nil"     
      | T_nilq 	   ->  "T_nilq"  	  
      | T_not      ->  "T_not"     
      | T_or	   ->  "T_or"	  
      | T_ref      ->  "T_ref"     
      | T_return   ->  "T_return"  
      | T_skip     ->  "T_skip"    
      | T_tail     ->  "T_tail"    
      | T_true     ->  "T_true"    
      | T_iconst   ->  "T_iconst"  
      | T_cconst   ->  "T_cconst"  
      | T_sconst   ->  "T_sconst"  
      | T_plus 	   ->  "T_plus"	  
      | T_minus    ->  "T_minus"   
      | T_times    ->  "T_times"   
      | T_div 	   ->  "T_div" 	  
      | T_cons 	   ->  "T_cons" 	  
      | T_eq 	   ->  "T_eq"	  
      | T_neq 	   ->  "T_neq" 	  
      | T_less     ->  "T_less"    
      | T_greater  ->  "T_greater" 
      | T_le       ->  "T_le"     
      | T_ge       ->  "T_ge"     
      | T_lparen   ->  "T_lparen"  
      | T_rparen   ->  "T_rparen"  
      | T_lbracket ->  "T_lbracket"
      | T_rbracket ->  "T_rbracket"
      | T_comma    ->  "T_comma"   
      | T_semic    ->  "T_semic"   
      | T_colon    ->  "T_colon"   
      | T_assign   ->  "T_assign"  

  let main = 
    let lexbuf = Lexing.from_channel stdin in
    let rec loop () = 
      let token = lexer lexbuf in
      Printf.printf "token=%s, lexeme=\"%s\"\n"
		    (string_of_token token) (Lexing.lexeme lexbuf);
      if token <> T_eof then loop () in
    loop ()

# 594 "lexer.ml"
